//
// $Id$
//	
// Laidout, for laying out
// Please consult http://www.laidout.org about where to send any
// correspondence about this software.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
// For more details, consult the COPYING file in the top directory.
//
// Copyright (C) 2004-2007 by Tom Lechner
//
/********************** laidout-more **********************/

// defines some stuff not stack dependent, so doesn't need lax/lists.cc

#include "laidout.h"
#include "viewwindow.h"
#include "spreadeditor.h"
#include "headwindow.h"
#include "version.h"

#include <lax/fileutils.h>

#include <iostream>
using namespace std;
#define DBG 

using namespace Laxkit;
using namespace LaxFiles;

/*! \enum TreeChangeType
 * \ingroup misc
 * \brief Type for what in the doc tree has changed. See TreeChangeEvent.
 */

/*! \class TreeChangeEvent
 * \brief Event class to tell various windows what has been altered.
 *
 * Windows will receive this event after the changes occur, but potentially also after
 * the window wants to access a possibly altered tree. This should not 
 * crash the program because of reference counting, but the windows must verify all the
 * relevant references when they receive such an event.
 *
 * \todo why is enum TreeChangeType not turning into a doxygen doc??
 * TreeChangeType:
 * <pre>
 *	TreeDocGone,
 *	TreePagesAdded,
 *	TreePagesDeleted,
 *	TreePagesMoved,
 *	TreeObjectRepositioned,
 *	TreeObjectReorder,
 *	TreeObjectDiffPage,
 *	TreeObjectDeleted,
 *	TreeObjectAdded
 * </pre>
 */


//! Tell all ViewWindow, SpreadEditor, and other main windows that the doc has changed.
/*! Sends a TreeChangeEvent to all SpreadEditor and ViewWindow panes in each top level HeadWindow.
 *
 * \todo *** should probably replace s and e with a FieldPlace: doc,page,obj,obj,...
 */
void LaidoutApp::notifyDocTreeChanged(Laxkit::anXWindow *callfrom,TreeChangeType change,int s,int e)
{
	DBG cout<<"notifyDocTreeChanged sending.."<<endl;
	HeadWindow *h;
	PlainWinBox *pwb;
	ViewWindow *view;
	SpreadEditor *se;
	anXWindow *w;
	TreeChangeEvent *edata,*te=new TreeChangeEvent;
	te->send_message=XInternAtom(laidout->dpy,"docTreeChange",False);
	te->changer=callfrom;
	te->changetype=change;
	te->start=s;
	te->end=e;
	 
	int c2,yes=0;
	for (int c=0; c<topwindows.n; c++) {
		if (callfrom==topwindows.e[c]) continue; // this hardly has effect as most are children of top
		h=dynamic_cast<HeadWindow *>(topwindows.e[c]);
		if (!h) continue;
		
		for (c2=0; c2<h->numwindows(); c2++) {
			pwb=h->windowe(c2);
			w=pwb->win;
			if (!w || callfrom==w) continue;
			view=dynamic_cast<ViewWindow *>(w);
			if (view) yes=1;
			else if (se=dynamic_cast<SpreadEditor *>(w), se) yes=1;

			 //construct events for the panes
			if (yes){
				edata=new TreeChangeEvent();
				*edata=*te;
				edata->send_towindow=w->window;
				app->SendMessage(edata);
				DBG cout <<"---(notifyDocTreeChanged) sending docTreeChange to "<<
				DBG 	w->win_title<< "("<<w->whattype()<<")"<<endl;
				yes=0;
			}
		}
	}
	delete te;
	DBG cout <<"eo notifyDocTreeChanged"<<endl;
	return;
}

//! Dump out a pseudocode mockup of everything that can appear in a Laidout document.
/*! f must have been previously opened for writing, such as stdout.
 *
 * The basic file of a Laidout document is a Project file, which references several
 * Document files, or just a Document file itself. 
 *
 * All the info is generated by passing what==-1 to all the dump_out() funtions that
 * are set up.
 *
 * If the file existed
 * 
 * See also createlaidoutrc().
 */
int LaidoutApp::dump_out_file_format(const char *file, int nooverwrite)
{
	if (!file || file_exists(file,1,NULL)) {
		cerr <<"Please remove "<<file<<" and try again."<<endl;
		return 1;
	}
	FILE *f=fopen(file,"w");
	if (!f) return 1;

	fprintf(f,"#Laidout %s File Format\n\n",LAIDOUT_VERSION);

	fprintf(f," # The basic file of a Laidout document is a Project file,\n"
			  " # which references several Document files, or just a Document file itself.\n"
			  " # For a project, the first line of the file will be (including the '#'):\n\n");
	fprintf(f,"#Laidout %s Project\n\n",LAIDOUT_VERSION);
	fprintf(f," # followed by all the project attributes. A single Document will start:\n\n");
	fprintf(f,"#Laidout %s Document\n\n",LAIDOUT_VERSION);
	fprintf(f," # followed by Document attributes. This pattern follows for most fragments of\n"
			  " # Laidout elements, so for instance, a stand alone Laidout palette file will start:\n");
	fprintf(f," # \"Laidout %s Palette\"",LAIDOUT_VERSION);
	fprintf(f," and will then continue with only palette attributes. Many resources, including\n"
			  " # palettes, and window arrangements, can appear at the Project level or the Document level.\n"
			  "\n"
			  " # Throughout this file format, data is grouped according to how much it is indented,\n"
			  " # reminiscent of python, and the Yaml file format. The format here is kind of a simplified\n"
			  " # yaml. Here, there are basically a name and value (called an attribute), plus any number\n"
			  " # of name-value pairs. A value can be on the same line as the name, or it can span several lines,\n"
			  " # if you write \"thename \\\" on one line, then the next several lines that are more indented\n"
			  " # than the name line contain the value. Always remember to use spaces for\n"
			  " # indents. NEVER tabs, because they cause too much confusion.\n"
			  "\n"
			  " # Without further ado, here are the actual elements, starting at the Project level.\n");
	fprintf(f,"\n\n#-----------------a Laidout Project file-----\n");
	fprintf(f,"#Laidout %s Project\n",LAIDOUT_VERSION);
	
	if (project) project->dump_out(f,0,-1);
	else {
		Project p;
		p.dump_out(f,0,-1);
	}
	fprintf(f,"\n");

	HeadWindow h(NULL,"",0, 0,0,0,0,0);
	fprintf(f,"#Window arrangements can be dumped out. These can be project attributes or Document\n"
			  "#or Document attributes, but if you are working on a project, not just a single Document,\n"
			  "#then the window attributes in a Document file are currently ignored.\n");
	h.dump_out(f,2,-1);
	
	fclose(f);

	return 0;
}
