note to self: 
 Most of these notes are to help the developer(s) package Laidout for releases.
 If you just want to make a deb package yourself, skip down to "build the package".


               NEW RELEASES
MAKING LAIDOUT DEB PACKAGE AND SRC TARBALL
------------------------------------------
(if anyone has a better way of doing this, let me know)


1. Double check that these are current:
  debian/laidout.1
  README.md  <-  must have updated dependency list
  the laidoutrc description dump out in laidout.cc

  make sure all the examples work.

2. ----Copy trunk to a new tag------
 svn copy https://svn.code.sf.net/p/laidout/code/trunk \
          https://svn.code.sf.net/p/laidout/code/tags/(whatever version)
 make sure the Makefile does not try to compile lax


3. ----modify source---
 check out the branch: svn co https://svn.code.sf.net/p/laidout/code/tags/(version)
 make sure any references to the current date are accurate, currently:
   debian/control
   debian/laidout.1
 make sure version number is correct in any source files that refer to it, currently:
   debian/changelog
   debian/laidout.1              :Version ****, for laying out books
   docs/doxygen/laidoutintro.txt :-- Version ***** --\n
   docs/Doxyfile                 :PROJECT_NUMBER         = *****
   docs/Doxyfile-with-laxkit     :PROJECT_NUMBER         = *****
   configure
   README.md                     :LAIDOUT Version *****
   all the example docs
   --> vi debian/changelog debian/laidout.1 docs/doxygen/laidoutintro.txt docs/Doxyfile docs/Doxyfile-with-laxkit configure README.md
 make sure the Quick Key References in QUICKREF.html are current (make quickref).
 touch Makefile-toinclude; make touchdepends;
 
 make sure configure defaults to 'prefix=/usr/local/'. This is what should be in a source tarball
 make sure 'make' does not try to make lax or laxinterfaces unless laxkit has been 
   downloaded into the source tree...
 
 Make sure all examples have the correct version number.


4. ---hide the debugging garbage and commit---
 make hidegarbage 
 (make sure same is done for laxkit, as Laidout currently statically
  links against laxkit, which also uses the same system to hide debugging code)
 make sure experimental shield is active in src/interfaces.cc
 svn ci -m'Last minute touchups to this tag'


5. ---Export a copy of the new tag and make a tarball.---
  a) svn export https://svn.code.sf.net/p/laidout/code/tags/(whichever) laidout-(version)
	   If Laxkit is to be included, you should export that to the top laidout dir: 

	  git clone http://github.com/tomlechner/laxkit.git laxkit
	  cd laxkit; rm -rf .git;

	  make sure in laidout/configure: LAXDIR=`pwd`/laxkit/lax

  b) Do 'cd laxkit; ./configure; make depends'
     cd to laidout top directory, we need Makefile-toinclude, so do:
	   ./configure
	   make touchdepends
	   make clean

  c) make hidegarbage if you haven't already, in src AND in laxkit

  d) in laidout top dir: rm src/configured.h Makefile-toinclude config.log

  e) if cairo is still not working, make sure to disable in code and not link in Makefiles

  f) make icons  (we make before packaging for convenience, in case people don't have inkscape installed):
	  cd laxkit/lax/icons; make;    # these use Inkscape to render from svg files to png 
	  cp *png ../../../src/icons    # <- copy the laxkit icons to the Laidout icon dir
      cd ../../../src/icons; make   # <- this will then overwrite any icons from Laidout supercede Laxkit

  g) cd to dir above laidout, and do:
      tar cjv (the dir) > laidout-version.tar.bz2 

     This should be the distributed tarball, unpack in some other dir and do a test compile:
	  mkdir test-build
	  cd test-build
	  tar xjvf ../laidout-version.tar.bz2
	  cd laidout-version
	  ./configure --prefix=`pwd`/../test-install


6. ---build a deb package---

dpkg-buildpackage -rfakeroot in top laidout directory

This often will expose otherwise unknown errors, I think because making the deb packages uses lots more
compile flags. You can do "fakeroot debian/rules binary" to not have to recompile everything after fixing.

If you fail with this error:
  dpkg-shlibdeps: error: no dependency information found for /usr/lib/libGL.so.1
then you need to change:
  dh_shlibdeps
in debian/rules to:
  dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info
Maybe something to do with non-packaged NVidia drivers?


7. After file release is uploaded, don't forget to:
     - update the help and screenshots sections on the website, and the website in general
	 - update the coop section to have links to current scripts
     - update the laidout rss feed
     - announce on the laidout mailing list, main website/rss, and g+

