This file is for scribling down rough notes about the requirements for text handling


background
---------
scribus inline graphics:
surrounding text can flow around....
 use the width, but not height. bounding box is used for flow for lines other than current


requirements:
------------
stream/story editor -> probably easily exportable to html

inserting inline graphics:
right click->insert reference->limbo n->obj1
right click->insert object->limbo n->obj1

menu:insert
  character
  text  ->textobj1, ...
  sample text
  object reference -> limbo1->obj1, ...
  object copy (dup an existing object


investigate
-----------
css parser ? https://github.com/Sigil-Ebook/cssparser/blob/master/cssparser/CSSParser.h
text layout techniques: https://raphlinus.github.io/text/2020/10/26/text-layout.html


Opentype variations
-------------------
GSUB GPOS
list of features: https://en.wikipedia.org/wiki/List_of_typographic_features

harfbuzz allegedly activates these automatically:
    - abvm  Above base mark positioning
	- blwm  Below base mark positioning
	- ccmp  Glyph composition/decomposition
	- locl  Localized forms
	- mark  Mark positioning
	- mkmk  Mark to mark positioning
	- rlig  Required ligatures
  if text dir is horizontal, also use by default:
    - calt  Contextual alternatives
	- clig  Contextual ligatures
	- curs  Cursive positioning
	- dist  Distance, kind of kern, but distances not meant to be user controlled.
	- kern  Kerning, horizontal positioning potentially controlled by user
	- liga  Standard ligatures
	- rclt  Required contextual alternates
  fraction slashes (U+2044) make hb look for:
    - numr  Numerators
    - dnom  Denominators
    - frac  Diagonal fractions like 1/2, 3/4
  vertical text gets: vert

    hb_feature_t userfeatures[1];
    userfeatures[0].tag = HB_TAG('d','l','i','g');
    userfeatures[0].value = 1;
    userfeatures[0].start = HB_FEATURE_GLOBAL_START;
    userfeatures[0].end = HB_FEATURE_GLOBAL_END;
    hb_shape(font, buf, userfeatures, num_features);

    int num_axes = hb_ot_var_get_axis_count(face);
    ...
    int num_axes = hb_ot_var_get_axis_infos(hb_face_t *face,
                            uint 0, // start offset
                            unsigned int *axes_count, // in: max number to return, out: actual number returned (could be 0)
                            hb_ot_var_axis_info_t *axes_array);

    typedef uint32_t hb_tag_t;

    typedef struct {
      unsigned int           axis_index;
      hb_tag_t               tag;
      hb_ot_name_id_t        name_id;
      hb_ot_var_axis_flags_t flags; // currently only: HB_OT_VAR_AXIS_FLAG_HIDDEN
      float                  min_value;
      float                  default_value;
      float                  max_value;
    } hb_ot_var_axis_info_t;

    typedef struct hb_variation_t {
      hb_tag_t tag;
      float    value;
    } hb_variation_t;

    typedef struct hb_feature_t {
      hb_tag_t      tag;
      uint32_t      value;
      unsigned int  start;
      unsigned int  end;
    } hb_feature_t;


    unsigned int variation_count = 2;
    hb_variation_t variation_data[variation_count];
    variation_data[0].tag = HB_OT_TAG_VAR_AXIS_WIDTH;
    variation_data[0].value = 80;
    variation_data[1].tag = HB_OT_TAG_VAR_AXIS_WEIGHT;
    variation_data[1].value = 750;
    hb_font_set_variations(font, variation_data, variation_count);


Features:
'aalt' 	Access All Alternates
'abvf' 	Above-base Forms
'abvm' 	Above-base Mark Positioning
'abvs' 	Above-base Substitutions
'afrc' 	Alternative Fractions
'akhn' 	Akhand
'apkn' 	Kerning for Alternate Proportional Widths
'blwf' 	Below-base Forms
'blwm' 	Below-base Mark Positioning
'blws' 	Below-base Substitutions
'calt' 	Contextual Alternates
'case' 	Case-sensitive Forms
'ccmp' 	Glyph Composition / Decomposition
'cfar' 	Conjunct Form After Ro
'chws' 	Contextual Half-width Spacing
'cjct' 	Conjunct Forms
'clig' 	Contextual Ligatures
'cpct' 	Centered CJK Punctuation
'cpsp' 	Capital Spacing
'cswh' 	Contextual Swash
'curs' 	Cursive Positioning
'cv01' – 'cv99' 	Character Variant 1 – Character Variant 99
'c2pc' 	Petite Capitals From Capitals
'c2sc' 	Small Capitals From Capitals
'dist' 	Distances
'dlig' 	Discretionary Ligatures
'dnom' 	Denominators
'dtls' 	Dotless Forms
'expt' 	Expert Forms
'falt' 	Final Glyph on Line Alternates
'fin2' 	Terminal Forms #2
'fin3' 	Terminal Forms #3
'fina' 	Terminal Forms
'flac' 	Flattened Accent Forms
'frac' 	Fractions
'fwid' 	Full Widths
'half' 	Half Forms
'haln' 	Halant Forms
'halt' 	Alternate Half Widths
'hist' 	Historical Forms
'hkna' 	Horizontal Kana Alternates
'hlig' 	Historical Ligatures
'hngl' 	Hangul
'hojo' 	Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms)
'hwid' 	Half Widths
'init' 	Initial Forms
'isol' 	Isolated Forms
'ital' 	Italics
'jalt' 	Justification Alternates
'jp78' 	JIS78 Forms
'jp83' 	JIS83 Forms
'jp90' 	JIS90 Forms
'jp04' 	JIS2004 Forms
'kern' 	Kerning
'lfbd' 	Left Bounds
'liga' 	Standard Ligatures
'ljmo' 	Leading Jamo Forms
'lnum' 	Lining Figures
'locl' 	Localized Forms
'ltra' 	Left-to-right Alternates
'ltrm' 	Left-to-right Mirrored Forms
'mark' 	Mark Positioning
'med2' 	Medial Forms #2
'medi' 	Medial Forms
'mgrk' 	Mathematical Greek
'mkmk' 	Mark to Mark Positioning
'mset' 	Mark Positioning via Substitution
'nalt' 	Alternate Annotation Forms
'nlck' 	NLC Kanji Forms
'nukt' 	Nukta Forms
'numr' 	Numerators
'onum' 	Oldstyle Figures
'opbd' 	Optical Bounds
'ordn' 	Ordinals
'ornm' 	Ornaments
'palt' 	Proportional Alternate Widths
'pcap' 	Petite Capitals
'pkna' 	Proportional Kana
'pnum' 	Proportional Figures
'pref' 	Pre-base Forms
'pres' 	Pre-base Substitutions
'pstf' 	Post-base Forms
'psts' 	Post-base Substitutions
'pwid' 	Proportional Widths
'qwid' 	Quarter Widths
'rand' 	Randomize
'rclt' 	Required Contextual Alternates
'rkrf' 	Rakar Forms
'rlig' 	Required Ligatures
'rphf' 	Reph Form
'rtbd' 	Right Bounds
'rtla' 	Right-to-left Alternates
'rtlm' 	Right-to-left Mirrored Forms
'ruby' 	Ruby Notation Forms
'rvrn' 	Required Variation Alternates
'salt' 	Stylistic Alternates
'sinf' 	Scientific Inferiors
'size' 	Optical size
'smcp' 	Small Capitals
'smpl' 	Simplified Forms
'ss01' – 'ss20' 	Stylistic Set 1 – Stylistic Set 20
'ssty' 	Math Script-style Alternates
'stch' 	Stretching Glyph Decomposition
'subs' 	Subscript
'sups' 	Superscript
'swsh' 	Swash
'titl' 	Titling
'tjmo' 	Trailing Jamo Forms
'tnam' 	Traditional Name Forms
'tnum' 	Tabular Figures
'trad' 	Traditional Forms
'twid' 	Third Widths
'unic' 	Unicase
'valt' 	Alternate Vertical Metrics
'vapk' 	Kerning for Alternate Proportional Vertical Metrics
'vatu' 	Vattu Variants
'vchw' 	Vertical Contextual Half-width Spacing
'vert' 	Vertical Alternates
'vhal' 	Alternate Vertical Half Metrics
'vjmo' 	Vowel Jamo Forms
'vkna' 	Vertical Kana Alternates
'vkrn' 	Vertical Kerning
'vpal' 	Proportional Alternate Vertical Metrics
'vrt2' 	Vertical Alternates and Rotation
'vrtr' 	Vertical Alternates for Rotation
'zero' 	Slashed Zero



math mode, basically latex formatting:
-------------------------------------
$blah blah$ set as span
$$blah blah$$ set as div
superscript: 2^3
subscript:  a_3
latex, 4 modes: inline math, eqnarray (equation numbers auto inserted on right), displaymath, equation


inline objects:
------------
objects anchored in text stream, positions:
 stay in stream, use bbox as glyph box, define alignment,
        v and h baseline (default baseline proportional to surrounding font)
 stay in stream, use bbox as conditional wrap area
 layout object somewhere in stream containing object (flowRegion), or a dynamically specified container (ie page or parent)
    footnotes
    images that float off to one side: v and h gravity
      if positioning float causes text reflow to have the text anchor on next page, have offset
      flag for whether to keep the float on current page, or force to next page
 tex can automatically collect figures, and put them on a special page, auto numbering of figures


-----------------------------------------
Essential stream/text features
----------------------------
initial characters: initial quotes hang out, number of lines long, wrap to box or to glyph/area
    "1st" char, then some number of next chars.. apply to 1st pp of a section??
research: find compromise between tex, css, svg, scribus layout mechanisms
research: what really does latex, context, metapost, metafont add, what requirements to support
tab stops are arbitrary paths
streams lay out in sections/pages
streams composed of any level of parts/chapters/sections/subsections == "section"+priority? part=priority 0, chapter=priority 1, etc
toc
index
bibliography
  bib id (ie ch1, ch2, article 1, article 2, etc)
notes
  notes id-> figure list
          -> table list
           -> foot notes
hyphenation, soft breaks, hyphens optionally hang past at eol
word spacing
leading, char spacing
glyph sizing
math mode -> lots of extra rules for formatting, access to lots of special symbols
character styles
paragraph styles
tagging, to signal urls, colors, special behavior or cataloging, dynamic content, etc
short words (Mr. Mrs. etc, that must bind to following word)
bidi
language switches:
  sometimes one sees things like
   <i18n>
    <en>thing</en>
    <es>cosa</es>
   </i18n>


drop caps
lists, bullet or numbered
Baseline grid across columns, anchor points across streams to line up translations
hanging punctuation
bibliography, toc, footnotes
section/subsection control
continued on page ?? <- auto update

character substitution, like for elipses, dashes, ff, other ligatures, etc

"Math equations support"
"Tabstops that lie on arbitrary paths, not just vertical and horizontal lines"
"Text on a line"
"Convert Text to editable path"
Tables that can optionally span multiple pages
"Automatic Hyphenation and justification"
"Insert sample gibberish text!! Yeah!"
"The power of <a href=\"http://www.tug.org\">TeX</a>"



text direction
--------------
Arabic can use Kashidas to justify text, not stretching whitespace. These are basically extra stretch marks that
span direction versus larger flow direction across columns, for instance



line breaking:
------------
libunibreak?
choose strategy:
  first fit: fast, considers only 1 line at a time
  surrounding fit: sort of fast, define how big a section of text to consider
  total fit: consider the entire stream when figuring breaks





Streams divided into chunks:
---------------------------
bgp chunk,  a squishybox
---------
width
glue width, only used if not eol
shrink
grow
penalty

pg chunk
--------
penalty
width (at eol only) , such as hanging punctuation
width (not at eol only) , such as spaces
shrink
grow
flag

tab chunk

font chunk
font with auto-hyphen chunk

linebreak chunk

region break chunk

section break chunk: depth of break, biggest is page break?? chapter break??

page break chunk

object chunk
floating object chunk


----- STYLE vvvv   ^^^^^ METRICS ----------

blocks of text and objects
each block can maybe be subdivided.
along each subdivision, there are special cases for hanging punctuation, and hyphens
each block points to a single style block.
each style block can point to many stream blocks
style blocks can be temporary, or stored somewhere in the stylemanager
links to biblio, footnotes, toc, index are instances of style blocks
each style block points to style info
all style blocks cascade based on what of style info each style block says to use
each stream block has extra potential metric info
each stream block has specific coordinates of layout info, which need to be regenerated on any text change
        --may not immediately update metrics, or use a faster line breaker until user says to
          do it all


breaks: line, section, chapter, page



---------------------------
Font styles
------------------------
----char styles:
underline
word underline
strikethrough
custom decoration
small caps
all caps
no caps
font size
outline (artificial stroking of contour)
bold   (artificial growing and filling of contour, or selection of bold font of same type)
italic (artificial shearing)
color, including alpha
bg color (highlighting)
drop shadow

----spacing styles:
char horizontal scaling
kerning before
kerning after
allowing hyphens
hyphen width,s,g, penalty
space w,s,g  (as percent of overriding font size)
inner word shrink, grow
before pp
after pp
inside pp
left margin 1st
left margin normal
right margin
tab lines
drop caps at front of pp: num lines to span, how to wrap, hang initial punc..
justification (0..100) left=0, right=100, center=50, full justify
text flow direction

